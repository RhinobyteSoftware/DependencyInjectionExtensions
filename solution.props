<Project>

    <!-- SOLUTION WIDE CUSTOMIZATIONS HERE-->
    <PropertyGroup>
        <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
        <SolutionPropsIsImported>true</SolutionPropsIsImported>

        <!-- Set RunOnlyOnceBeforeBuildTarget to 'BeforeBuild' for single target projects and 'DispatchToInnerBuilds' for cross taretting projects -->
        <RunOnlyOnceBeforeBuildTarget Condition=" '$(TargetFrameworks)' == '' AND '$(TargetFramework)' != '' ">BeforeBuild</RunOnlyOnceBeforeBuildTarget>
        <RunOnlyOnceBeforeBuildTarget Condition=" '$(TargetFrameworks)' != '' AND '$(TargetFramework)' == '' ">DispatchToInnerBuilds</RunOnlyOnceBeforeBuildTarget>

        <DefaultTargetFrameworks>netstandard2.0;netstandard2.1;net48;netcoreapp3.1;net5.0</DefaultTargetFrameworks>
        <InternalMsbuildMessageImportance>normal</InternalMsbuildMessageImportance>
        <SolutionSummary>Extension libraries for the .NET</SolutionSummary>

        <AnalysisMode>AllEnabledByDefault</AnalysisMode>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

        <!-- Common Package/Project Property Values -->
        <Authors>Ryan Thomas</Authors>
        <Company>Rhinobyte Software</Company>
        <Copyright>Copyright Â© Ryan Thomas $([System.DateTime]::Now.ToString("yyyy"))</Copyright>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <IncludeSymbols>true</IncludeSymbols>
        <NeutralLanguage>en-US</NeutralLanguage>
        <PackageIcon>Icon.png</PackageIcon>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageOutputPath>$(RepoRoot)build\$(Configuration)\</PackageOutputPath>
        <PackageProjectUrl>https://github.com/RhinobyteSoftware/dotnet-extensions</PackageProjectUrl>
        <!-- 
            Enable The <PackageReadmeFile> tag once the .NET 6 SDK version is released (need at least .NET SDK RC2)
            Needed to solve this problem: https://github.com/NuGet/Home/issues/10791#issuecomment-926218883
        -->
        <!-- <PackageReadmeFile>README.md</PackageReadmeFile> -->
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <RepositoryUrl>https://github.com/RhinobyteSoftware/dotnet-extensions</RepositoryUrl>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <!-- Subproject Package Versions -->
        <DataAnnotationsPackageVersion>1.0.1</DataAnnotationsPackageVersion>
        <DataAnnotationsPackageConsumerDependencyVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(DataAnnotationsPackageVersion)', '(\d+\.\d+)\..+', '$1.0'))</DataAnnotationsPackageConsumerDependencyVersion>

        <DependencyInjectionPackageVersion>1.0.0</DependencyInjectionPackageVersion>
        <DependencyInjectionPackageConsumerDependencyVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(DependencyInjectionPackageVersion)', '(\d+\.\d+)\..+', '$1.0'))</DependencyInjectionPackageConsumerDependencyVersion>

        <ReflectionPackageVersion>1.0.1</ReflectionPackageVersion>
        <ReflectionPackageConsumerDependencyVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(ReflectionPackageVersion)', '(\d+\.\d+)\..+', '$1.0'))</ReflectionPackageConsumerDependencyVersion>

        <TestToolsPackageVersion>1.0.0</TestToolsPackageVersion>
        <TestToolsPackageConsumerDependencyVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(TestToolsPackageVersion)', '(\d+\.\d+)\..+', '$1.0'))</TestToolsPackageConsumerDependencyVersion>
    </PropertyGroup>

    <Import Condition="Exists('$(RepoRoot)\development.local.props')" Project="$(RepoRoot)\development.local.props"/>

    <PropertyGroup Condition="'$(Configuration)' == 'Release' OR '$(Configuration)' == 'ReleaseTesting'">
        <Optimize>true</Optimize>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'ReleaseTesting' ">
        <DefineConstants>IS_RELEASE_TESTING_BUILD</DefineConstants>
    </PropertyGroup>


    <!-- SOLUTION WIDE CODE ANALYZER PACKAGES -->
    <ItemGroup>
        <PackageReference Include="Microsoft.VisualStudio.Threading.Analyzers" Version="16.9.60">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
    </ItemGroup>


    <!-- ASSEMBLY ATTRIBUTE GENERATION -->
    <ItemGroup Condition=" '$(Configuration)' == 'Debug' OR '$(Configuration)' == 'ReleaseTesting' ">
        <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
            <_Parameter1>$(ProjectName).Tests</_Parameter1>
        </AssemblyAttribute>
        <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
            <_Parameter1>$(ProjectName).UnitTests</_Parameter1>
        </AssemblyAttribute>
    </ItemGroup>

    <ItemGroup Condition=" '$(IsClsCompliant)' == 'true' ">
        <AssemblyAttribute Include="System.CLSCompliant">
            <_Parameter1>true</_Parameter1>
            <_Parameter1_IsLiteral>true</_Parameter1_IsLiteral>
        </AssemblyAttribute>
    </ItemGroup>


    <!-- NUGET PACKAGE FILE INCLUDES -->
    <ItemGroup Condition="'$(IsPackable)' == 'true'">
        <None Include="$(RepoRoot)\LICENSE.txt" Pack="true" PackagePath="LICENSE.txt" />
        <None Include="$(RepoRoot)\RhinobytePackageIcon.png" Pack="true" PackagePath="Icon.png" />
        <None Include="$(MSBuildProjectDirectory)\README.md" Pack="true" PackagePath="README.md" />
    </ItemGroup>


    <!-- SOLUTION WIDE CUSTOM TARGETS -->
    
    <!-- CopyToLocalPackages Target -->
    <Target Name="CopyToLocalPackages" AfterTargets="Pack" Condition="'$(OutputToDevelopmentPackages)' == 'true' AND '$(IsPackable)' == 'true'">
        <Message Text="Creating DevelopmentPackagesDirectory: $(DevelopmentPackagesDirectory)" Condition="!Exists('$(DevelopmentPackagesDirectory)')" Importance="$(InternalMsbuildMessageImportance)" />
        <MakeDir Directories="$(DevelopmentPackagesDirectory)" Condition="!Exists('$(DevelopmentPackagesDirectory)')" />

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
DevelopmentPackagesDirectory: $(DevelopmentPackagesDirectory)
PackageOutputPath: $(PackageOutputAbsolutePath)
PackageId: $(PackageId)
PackageVersion: $(PackageVersion)"  />

        <Exec Command="del $(PackageId).$(PackageVersion).*" WorkingDirectory="$(DevelopmentPackagesDirectory)" />

        <Copy SourceFiles="$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg" DestinationFolder="$(DevelopmentPackagesDirectory)" />
    </Target>

    
    <!-- CreateDevelopmentPropsFile Target -->
    <Target Name="CreateDevelopmentPropsFile" BeforeTargets="$(RunOnlyOnceBeforeBuildTarget)" Condition="'$(Configuration)' != 'Release' AND Exists('$(RepoRoot)') AND !Exists('$(RepoRoot)\development.local.props')">
        <PropertyGroup>
            <RepoRootParent>$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine('$(RepoRoot)', '..'))'))</RepoRootParent>
            <LocalPackagesPath Condition="'$(LocalPackagesPath)' == ''">$(RepoRootParent)\localPackages</LocalPackagesPath>
            <DevelopmentPropsFileLines>
&lt;Project&gt;
    &lt;PropertyGroup&gt;
        &lt;DevelopmentPackagesDirectory&gt;$(LocalPackagesPath)&lt;/DevelopmentPackagesDirectory&gt;
        &lt;!--  low, normal, or high --&gt;
        &lt;InternalMsbuildMessageImportance&gt;high&lt;/InternalMsbuildMessageImportance&gt;
        &lt;OutputToDevelopmentPackages&gt;false&lt;/OutputToDevelopmentPackages&gt;
        &lt;UseProjectReferences&gt;true&lt;/UseProjectReferences&gt;
    &lt;/PropertyGroup&gt;
&lt;/Project&gt;
            </DevelopmentPropsFileLines>
        </PropertyGroup>

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
Creating default development.local.props file...

$(DevelopmentPropsFileLines)

RepoRoot: '$(RepoRoot)'
RepoRootParent: '$(RepoRootParent)'
LocalPackagesPath: '$(LocalPackagesPath)'
                " />

        <WriteLinesToFile File="$(RepoRoot)\development.local.props" Lines="$(DevelopmentPropsFileLines)" Overwrite="True" ContinueOnError="true" />
    </Target>


    <!-- CreateDevelopmentTargetsFile Target -->
    <Target Name="CreateDevelopmentTargetsFile" BeforeTargets="$(RunOnlyOnceBeforeBuildTarget)" Condition="'$(Configuration)' != 'Release' AND Exists('$(RepoRoot)') AND !Exists('$(RepoRoot)\development.local.targets')">
        <PropertyGroup>
            <DevelopmentTargetsFileLines>
&lt;Project&gt;
    &lt;PropertyGroup&gt;
        <!-- Projects to temporarily disable optimization on to make debugging in the ReleaseTesting configuration easier -->
        <!-- Each project name must end with a semicolon, even if there is only a single entry -->
        &lt;ProjectsThatShouldNotBeOptimized&gt;
        &lt;/ProjectsThatShouldNotBeOptimized&gt;
    &lt;/PropertyGroup&gt;
&lt;/Project&gt;
            </DevelopmentTargetsFileLines>
        </PropertyGroup>

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
Creating default development.local.targets file...

$(DevelopmentTargetsFileLines)
                " />

        <WriteLinesToFile File="$(RepoRoot)\development.local.targets" Lines="$(DevelopmentTargetsFileLines)" Overwrite="True" ContinueOnError="true" />
    </Target>


    <!-- PreparePackageReleaseNotesFromFile Target -->
    <Target Name="PreparePackageReleaseNotesFromFile" BeforeTargets="GenerateNuspec" Condition="Exists('$(ReleaseNotesTextFilePath)')">
        <ReadLinesFromFile File="$(ReleaseNotesTextFilePath)" >
            <Output TaskParameter="Lines" ItemName="ReleaseNoteLines"/>
        </ReadLinesFromFile>
        <PropertyGroup>
            <PackageReleaseNotes>@(ReleaseNoteLines, '%0a')</PackageReleaseNotes>
        </PropertyGroup>
    </Target>

</Project>
